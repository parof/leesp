use std::str::FromStr;
use parser::{
    build_parser_cons,
    new_str_with_quotes,
    build_list,
    build_quoted_list
};
use language::{
    Cell,
    new_nil,
    new_num,
    new_symbol
};

grammar;

// type inference!
pub Sexpr: Cell = {
    Nil,
    Num,
    Symbol,
    String,
    Cons,
    "'" "(" Sexpr+ ")" => build_quoted_list(<>), 
    "(" Sexpr+ ")" => build_list(<>, new_nil()),
    // TODO: fix this... not so important
    // "(" Sexpr+ "." Sexpr ")" => build_list_with_last_element(<>)
};

match {
    r"[Nn][Ii][Ll]"
} else {
    r"-*[0-9]+"
} else {
    r"\w+", 
    _
}

Nil : Cell = {
    r"[Nn][Ii][Ll]" => new_nil()
};

Num: Cell = {
    r"-*[0-9]+" => new_num(i32::from_str(<>).unwrap())
};

Symbol: Cell = {
    r"\w+" => new_symbol(<>.to_string()) 
}

String: Cell = {
    r"'[\w ]+'" => new_str_with_quotes(<>.to_string()) 
}

Cons: Cell = {
    "(" Sexpr "." Sexpr ")" => build_parser_cons(<>)
}
